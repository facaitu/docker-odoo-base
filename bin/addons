#!/usr/bin/env python
from __future__ import print_function
import ast
import os
import sys
from argparse import ArgumentParser
from subprocess import check_call
from odoobaselib import (
    addons_config,
    CORE,
    logging,
    MANIFESTS,
    PRIVATE,
    SRC_DIR,
)

# Define CLI options
parser = ArgumentParser(description="Install addons in current environment")
parser.add_argument(
    "action", choices=("init", "update", "list"),
    help="What to do with the matched addons.")
parser.add_argument(
    "-c", "--core", action="store_true",
    help="Use all Odoo core addons")
parser.add_argument(
    "-e", "--extra", action="store_true",
    help="Use all extra addons")
parser.add_argument(
    "-f", "--fullpath", action="store_true",
    help="Print addon's full path, only useful with list mode")
parser.add_argument(
    "-i", "--installable", action="store_true",
    help="Include only installable addons")
parser.add_argument(
    "-p", "--private", action="store_true",
    help="Use all private addons")
parser.add_argument(
    "-s", "--separator", type=str, default=",",
    help="String that separates addons only useful with list mode")
parser.add_argument(
    "-t", "--test", action="store_true",
    help="Run unit tests for these addons, usually combined with update")
parser.add_argument(
    "-x", "--explicit", action="store_true",
    help="Fail if any addon is explicitly declared but not found")

# Generate the matching addons set
args = parser.parse_args()
addons = set()
for addon, repo in addons_config(strict=args.explicit):
    core_ok = args.core and repo == CORE
    extra_ok = args.extra and repo not in {CORE, PRIVATE}
    private_ok = args.private and repo == PRIVATE
    if private_ok or core_ok or extra_ok:
        addon_path = os.path.join(SRC_DIR, repo, addon)
        if args.installable:
            installable = False
            manifests = list(MANIFESTS)
            while True:
                try:
                    manifest = os.path.join(addon_path, manifests.pop())
                    with open(manifest, "r") as code:
                        manifest = ast.literal_eval(code.read())
                except IndexError:
                    break
                except IOError:
                    continue
                else:
                    installable = manifest.get("installable", True)
                    break
            if not installable:
                continue
        if args.fullpath and args.action == "list":
            addon = addon_path
        addons.add(addon)

# Do the required action
if not addons:
    sys.exit("No addons found")
addons = args.separator.join(sorted(addons))
if args.action == "list":
    print(addons)
else:
    command = ["odoo", "--stop-after-init", "--{}".format(args.action), addons]
    if args.test:
        command += ["--test-enable", "--workers", "0"]
    logging.info("Executing %s", " ".join(command))
    check_call(command)
